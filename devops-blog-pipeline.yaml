AWSTemplateFormatVersion: 2010-09-09
Description: Creating DevOps Blog Ap with Automation using pipeline and git 

Parameters:
  ### Adjustable Pipeline Name ###
  CodePipelineName: 
    Type: String
    Default: DevOpsBlogApp
    Description: A name for CodePipeline

Resources:
  ### NETWORKING ####
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: DevOps Blog VPC

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    DependsOn: VPC

  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - '0'
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: Public Subnet 1

  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - '1'
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: Public Subnet 2

  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    DependsOn:
      - AttachGateway
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public Route Table

  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn:
      - VPC
      - AttachGateway

    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  WebSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP access
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: FINAL-Web-Security-Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  ### EC2 Resources ###
  EC2InstanceProfileRoleForCodeDeploy:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforAWSCodeDeploy"
        - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
        - "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"

  EC2InstanceprofileforCodeDeploy:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2InstanceProfileRoleForCodeDeploy

  EC2Instance:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
        
    Properties:
      IamInstanceProfile: !Ref EC2InstanceprofileforCodeDeploy
      ImageId: ami-06b21ccaeff8cd686
      InstanceType: t2.micro
      KeyName: virginia-key
      SecurityGroupIds:
        - !Ref WebSecurityGroup
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: CodePipelineBlog
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            yum -y update
            yum install -y ruby
            yum install -y aws-cli
            cd /home/ec2-user
            #Downloading & Installing CodeDeploy Agent as per https://docs.aws.amazon.com/codepipeline/latest/userguide/tutorials-simple-s3.html#S3-create-instances
            aws s3 cp s3://aws-codedeploy-${AWS::Region}/latest/install . --region ${AWS::Region}
            chmod +x ./install
            ./install auto
            #Sending signal to CloudFormation
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region}           

  ### Services roles ###
  CodeDeployServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "codedeploy.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole"
  
  CodeBuildRole:
    Description: Creating service role in IAM for AWS CodeBuild
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
      Path: /
      RoleName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - CodeBuild
    Type: AWS::IAM::Role

  CodePipelineServiceRole:
    Type: "AWS::IAM::Role"
    DependsOn: CodeDeployServiceRole
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "codepipeline.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: CodeDeployPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - "codedeploy:CreateDeployment"
                  - "codedeploy:GetApplication"
                  - "codedeploy:GetApplicationRevision"
                  - "codedeploy:GetDeployment"
                  - "codedeploy:GetDeploymentConfig"
                  - "codedeploy:RegisterApplicationRevision"
                Effect: Allow
                Resource: '*'
        - PolicyName: S3Permissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - "s3:PutObject"
                  - "s3:GetObjectAcl"
                  - "s3:GetObject"
                  - "s3:ListBucket"
                  - "s3:GetBucketVersioning"
                  - "s3:GetBucketAcl"
                  - "s3:GetBucketLocation"
                  - "s3:GetObjectVersion"
                Effect: Allow
                Resource: '*'
        - PolicyName: GitHubPermissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - "codepipeline:StartPipelineExecution"  # Adjust as needed
                  - "codepipeline:GetPipeline"               # Adjust as needed
                  - "codepipeline:GetPipelineExecution"      # Adjust as needed
                Effect: Allow
                Resource: '*'
        - PolicyName: CodeBuildPermissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - "codebuild:BatchGetBuilds"
                  - "codebuild:StartBuild"
                  - "codebuild:BatchGetBuildBatches"
                  - "codebuild:StartBuildBatch"
                Effect: Allow
                Resource: '*'
        - PolicyName: CodeConnections
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action: 
                  - "codestar-connections:UseConnection"
                Effect: Allow
                Resource: "arn:aws:codeconnections:us-east-1:834549009763:connection/3a0b9739-c5bd-4955-aa4e-989b23eb1679"

  ### S3 for Codepipeline ###
  CodePipelineArtifactStoreS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: devopsblogapp-desxtra0812

  ### AWS CodePipeline Resources ###
  SampleCodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineArtifactStoreS3Bucket
      Name: !Ref CodePipelineName
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: "1"
                Provider: CodeStarSourceConnection
              OutputArtifacts:
                - Name: SourceArtifact
              Configuration: 
                BranchName: main
                FullRepositoryId: desxtra/devops-blog-app
                ConnectionArn: arn:aws:codeconnections:us-east-1:834549009763:connection/3a0b9739-c5bd-4955-aa4e-989b23eb1679
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: "1"
                Provider: CodeDeploy
              Configuration:
                ApplicationName: !Ref CodeDeployApplication
                DeploymentGroupName: !Ref DeploymentGroup
              InputArtifacts:
                - Name: SourceArtifact
        - Name: AcceptanceTest
          Actions:
            - Name: AcceptanceTest
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              Configuration:
                ProjectName: DevOpsBlogBuild
              InputArtifacts:
                - Name: SourceArtifact
              OutputArtifacts:
                - Name: BuildArtifact

  ### AWS CodeDeploy Resources ###
  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    DependsOn: EC2Instance
    Properties:
      ApplicationName: CodePipeBlogSampleApplication
      ComputePlatform: Server

  DeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      DeploymentGroupName: MyDemoDeploymentGroup
      DeploymentConfigName: CodeDeployDefault.AllAtOnce
      DeploymentStyle:
          DeploymentOption: WITHOUT_TRAFFIC_CONTROL
          DeploymentType: IN_PLACE
      Ec2TagFilters:
        - Key: Name
          Value: CodePipelineBlog
          Type: KEY_AND_VALUE
      ServiceRoleArn: !GetAtt CodeDeployServiceRole.Arn

  ### AWS CodeBuild Resources ###